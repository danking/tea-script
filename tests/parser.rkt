#lang racket
(require test-engine/racket-tests)
(require "../parser.scm")
(require "../tea-data.scm")

(check-expect (parse-tea-defexp '(define foo 3))
              (tea-define (tea-id 'foo) (tea-number 3)))
(check-expect (parse-tea-defexp '(define (foo bar baz) (+ bar baz)))
              (tea-pdefine (tea-id 'foo)
                        (list (tea-id 'bar)
                              (tea-id 'baz))
                        (list (tea-apply (tea-id '+)
                                      (list (tea-id 'bar)
                                            (tea-id 'baz))))))
(check-expect (parse-tea-defexp '3)
              (tea-number 3))
(check-expect (parse-tea-defexp '"foo")
              (tea-string "foo"))
(check-expect (parse-tea-defexp 'foo)
              (tea-id 'foo))
(check-expect (parse-tea-defexp ''foo)
              (tea-symbol 'foo))
(check-expect (parse-tea-defexp '(+ 1 foo))
              (tea-apply (tea-id '+)
                      (list (tea-number 1)
                            (tea-id 'foo))))
(check-expect (parse-tea-defexp '(lambda (x y z) (- x y z)))
              (tea-lambda (list (tea-id 'x)
                             (tea-id 'y)
                             (tea-id 'z))
                       (list (tea-apply (tea-id '-)
                                     (list (tea-id 'x)
                                           (tea-id 'y)
                                           (tea-id 'z))))))

(check-expect (parse-tea-defexp ''(1 2 (3 4 (5 6) a b) "c" "d"))
              (tea-list (list (tea-number 1)
                         (tea-number 2)
                         (tea-list (list (tea-number 3)
                                    (tea-number 4)
                                    (tea-list (list (tea-number 5)
                                               (tea-number 6)))
                                    (tea-symbol 'a)
                                    (tea-symbol 'b)))
                         (tea-string "c")
                         (tea-string "d"))))

(test)
