#lang racket
(require test-engine/racket-tests)
(require "testing-defs.scm")
(require "../parser.scm")

(check-expect (parse-tea-defexp '(define foo 3))
              (tdefine (tid 'foo) (tnumber 3)))
(check-expect (parse-tea-defexp '(define (foo bar baz) (+ bar baz)))
              (tpdefine (tid 'foo)
                        (list (tid 'bar)
                              (tid 'baz))
                        (list (tapply (tid '+)
                                      (list (tid 'bar)
                                            (tid 'baz))))))
(check-expect (parse-tea-defexp '3)
              (tnumber 3))
(check-expect (parse-tea-defexp '"foo")
              (tstring "foo"))
(check-expect (parse-tea-defexp 'foo)
              (tid 'foo))
(check-expect (parse-tea-defexp ''foo)
              (tsymbol 'foo))
(check-expect (parse-tea-defexp '(+ 1 foo))
              (tapply (tid '+)
                      (list (tnumber 1)
                            (tid 'foo))))
(check-expect (parse-tea-defexp '(lambda (x y z) (- x y z)))
              (tlambda (list (tid 'x)
                             (tid 'y)
                             (tid 'z))
                       (list (tapply (tid '-)
                                     (list (tid 'x)
                                           (tid 'y)
                                           (tid 'z))))))

(check-expect (parse-tea-defexp ''(1 2 (3 4 (5 6) a b) "c" "d"))
              (tls (list (tnumber 1)
                         (tnumber 2)
                         (tls (list (tnumber 3)
                                    (tnumber 4)
                                    (tls (list (tnumber 5)
                                               (tnumber 6)))
                                    (tsymbol 'a)
                                    (tsymbol 'b)))
                         (tstring "c")
                         (tstring "d"))))

(test)
