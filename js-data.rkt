#lang racket
(provide (except-out (all-defined-out) tstruct))

(define-syntax tstruct
  (syntax-rules ()
    [(_ args ...) (struct args ... #:transparent)]))

(tstruct jstatement ())
  ;; (jdef JS-Id)
  (tstruct jdef jstatement (name))
    ;; (jvdef JId JExp)
    (tstruct jvdef jdef (exp))
    ;; (jfdef JId [ListOf JId] [ListOf JStatement])
    (tstruct jfdef jdef (args body))
  (tstruct jexp jstatement ())
    ;; (jid Symbol)
    (tstruct jid jexp (name))
    (tstruct jprim jexp ())
      ;; (jbool Boolean)
      (tstruct jbool jprim (value))
      ;; (jundef)
      (tstruct jundef jprim ())
      ;; (jnull)
      (tstruct jnull jprim ())
      ;; (jstring String)
      (tstruct jstring jprim (value))
      ;; (jnumber Number)
      (tstruct jnumber jprim (value))
      ;; (jarray [ListOf JExp])
      (tstruct jarray jprim (value))
    (tstruct jop jexp ())
      ;; (jnumop Symbol (U (list JExp) (list JExp JExp)))
      (tstruct jprimop jop (op args))
      ;; (jbracket JExp JString)
      (tstruct jbracket jop (object property))
      ;; (jcond JExp JExp JExp)
      (tstruct jcond jop (condition iftrue iffalse))
      ;; (jcomma [ListOf JExp])
      (tstruct jcomma jop (exps))
      ;; (jin JExp JExp)
      (tstruct jin jop (property object))
      ;; (jinstof JExp JExp
      (tstruct jinstof jop (object type))
      ;; (jtypeof JExp)
      (tstruct jtypeof jop (exp))
      ;; (jdot JExp JId)
      (tstruct jdot jop (object property))
      ;; (jnew JId [ListOf JExp])
      (tstruct jnew jop (name args))
    ;; (japply JExp [ListOf JExp])
    (tstruct japply jexp (exp args))
    ;; (jlambda [ListOf JId] [ListOf JStatement])
    (tstruct jlambda jexp (args body))
  ;; (jreturn JExp)
  (tstruct jreturn jstatement (exp))
