<statement> ::= <definition>
              | <expression>
              | "return " <expression>

<definition> ::= "var" <id> " = " <expression>
               | "function " <id> " (" <argument-list> ") { " <statements> " }"

<statements> ::= <statment> ";\n" <statements>
               | <statement> ";\n"

<expression> ::= <id>
               | <primitive>
               | <application>
               | <lambda>
               | "new " <application>

<id> ::= [A-z_][A-z0-9]*
  Except:
    abstract boolean break byte case catch char class const continue debugger
    default delete do double else enum export extends false final finally
    float for function goto if implements import in instanceof int interface
    long native new null package private protected public return short
    static super switch synchronized this throw throws transient true try
    typeof var void volatile while with

<primitive> ::= true
              | false
              | undefined
              | null
              | <string>
              | <number>
              | <array-literal>

<application> ::= <expression> "(" <argument-list> ")"

<lambda> ::= "function (" <argument-list> ") { " <statements> " }"

<argument-list> ::= <expression> ", " <argument-list>
                ::= <expression>

<string> ::= "\"" [^\"]* "\""

<number> ::= usual definition

<array-literal> ::= "[" <argument-list> "]"